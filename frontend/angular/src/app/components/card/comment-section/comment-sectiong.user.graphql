fragment UCommentSectionCommentAuthor on user {
  authId
  name
  imageUrl
}

fragment UCommentSectionCommentReactionGroup on comment_reactions_group {
  count
  reactionid
}
fragment UCommentSectionCommentReaction on comment_reaction {
  reactionId
}

fragment UCommentSectionComment on comment {
  id
  author {
    ...UCommentSectionCommentAuthor
  }
  comment
  createdAt
  reactionBalance
  reactionsGroup {
    ...UCommentSectionCommentReactionGroup
  }
  myReactions: reactions(where: {authorId: {_eq: $authorId}}) {
    ...UCommentSectionCommentReaction
  }
}

query UCommentSectionComments($documentId: uuid!, $limit: Int!, $offset: Int!, $authorId: String!) {
  allComments(where: {documentId: {_eq: $documentId}}, limit: $limit, offset: $offset, order_by: [{createdAt: desc}]) {
    ...UCommentSectionComment
  }
}


mutation UCommentSectionAddCommentReaction($commentId: uuid!, $reactionId: String!) {
  addCommentReaction(objects: [{commentId: $commentId, reactionId: $reactionId}]) {
    affected_rows
  }
}

mutation UCommentSectionRemoveCommentReaction($commentId: uuid!, $reactionId: String!) {
  removeCommentReaction(where: {commentId: {_eq: $commentId}, reactionId: {_eq: $reactionId}}) {
    affected_rows
  }
}

mutation UAddComment($comment: String!, $documentId: uuid!) {
  addComment(objects: [{comment: $comment, documentId: $documentId}]) {
    returning {
      id
    }
  }
}

mutation URemoveComment($commentId: uuid!) {
  removeComment(where: {id: {_eq: $commentId}}) {
    affected_rows
  }
}

mutation UEditComment($commentId: uuid!, $comment: String!) {
  updateComment(where: {id: {_eq: $commentId}}, _set: {comment: $comment}) {
    affected_rows
  }
}
