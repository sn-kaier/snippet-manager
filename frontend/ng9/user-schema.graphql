# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"columns and relationships of \"color\""
type color {
  color: String!
  name: String!
}

"columns and relationships of \"comment\""
type comment {
  "An object relationship"
  author: user!
  authorId: String!
  comment: String!
  createdAt: timestamptz!
  "An object relationship"
  document: document!
  documentId: uuid!
  id: uuid!
  reactionBalance: Int!
  "An array relationship"
  reactions(
    "distinct select on columns"
    distinct_on: [comment_reaction_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [comment_reaction_order_by!],
    "filter the rows returned"
    where: comment_reaction_bool_exp
  ): [comment_reaction!]!
  "An array relationship"
  reactionsGroup(
    "distinct select on columns"
    distinct_on: [comment_reactions_group_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [comment_reactions_group_order_by!],
    "filter the rows returned"
    where: comment_reactions_group_bool_exp
  ): [comment_reactions_group!]!
  updatedAt: timestamptz!
}

"response of any mutation on the table \"comment\""
type comment_mutation_response {
  "number of affected rows by the mutation"
  affected_rows: Int!
  "data of the affected rows by the mutation"
  returning: [comment!]!
}

"columns and relationships of \"comment_reaction\""
type comment_reaction {
  "An object relationship"
  author: user!
  authorId: String!
  "An object relationship"
  comment: comment!
  commentId: uuid!
  createdAt: timestamptz!
  id: uuid!
  "An object relationship"
  reaction: reaction!
  reactionId: String!
}

"response of any mutation on the table \"comment_reaction\""
type comment_reaction_mutation_response {
  "number of affected rows by the mutation"
  affected_rows: Int!
  "data of the affected rows by the mutation"
  returning: [comment_reaction!]!
}

"columns and relationships of \"comment_reactions_group\""
type comment_reactions_group {
  count: bigint
  reactionid: String
}

"columns and relationships of \"document\""
type document {
  allowComments: Boolean!
  "An object relationship"
  author: user!
  authorId: String!
  "An array relationship"
  comments(
    "distinct select on columns"
    distinct_on: [comment_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [comment_order_by!],
    "filter the rows returned"
    where: comment_bool_exp
  ): [comment!]!
  content: String!
  countComments: Int!
  createdAt: timestamptz!
  id: uuid!
  isPublic: Boolean!
  "An array relationship"
  labels(
    "distinct select on columns"
    distinct_on: [document_label_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [document_label_order_by!],
    "filter the rows returned"
    where: document_label_bool_exp
  ): [document_label!]!
  reactionBalance: Int!
  "An array relationship"
  reactions(
    "distinct select on columns"
    distinct_on: [document_reaction_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [document_reaction_order_by!],
    "filter the rows returned"
    where: document_reaction_bool_exp
  ): [document_reaction!]!
  "An array relationship"
  reactionsGroup(
    "distinct select on columns"
    distinct_on: [document_reaction_group_persisted_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [document_reaction_group_persisted_order_by!],
    "filter the rows returned"
    where: document_reaction_group_persisted_bool_exp
  ): [document_reaction_group_persisted!]!
  title: String!
  updatedAt: timestamptz!
}

"columns and relationships of \"document_label\""
type document_label {
  "An object relationship"
  author: user!
  authorId: String!
  "An object relationship"
  document: document!
  id: uuid!
  "An object relationship"
  label: label!
  labelId: uuid!
}

"response of any mutation on the table \"document_label\""
type document_label_mutation_response {
  "number of affected rows by the mutation"
  affected_rows: Int!
  "data of the affected rows by the mutation"
  returning: [document_label!]!
}

"response of any mutation on the table \"document\""
type document_mutation_response {
  "number of affected rows by the mutation"
  affected_rows: Int!
  "data of the affected rows by the mutation"
  returning: [document!]!
}

"columns and relationships of \"document_reaction\""
type document_reaction {
  authorId: String!
  createdAt: timestamptz!
  "An object relationship"
  document: document!
  documentId: uuid!
  id: uuid!
  "An object relationship"
  reaction: reaction!
  reactionId: String!
}

"columns and relationships of \"document_reaction_group\""
type document_reaction_group {
  count: bigint
  reaction_id: String
}

"""

persisted version of the document_reaction_group


columns and relationships of "document_reaction_group_persisted"
"""
type document_reaction_group_persisted {
  count: Int!
  reactionid: String!
}

"response of any mutation on the table \"document_reaction\""
type document_reaction_mutation_response {
  "number of affected rows by the mutation"
  affected_rows: Int!
  "data of the affected rows by the mutation"
  returning: [document_reaction!]!
}

"columns and relationships of \"follow\""
type follow {
  "An object relationship"
  author: user!
  authorId: String!
  createdAt: timestamptz!
  "An object relationship"
  following: user!
  followingId: String!
  id: uuid!
}

"response of any mutation on the table \"follow\""
type follow_mutation_response {
  "number of affected rows by the mutation"
  affected_rows: Int!
  "data of the affected rows by the mutation"
  returning: [follow!]!
}

"columns and relationships of \"label\""
type label {
  "An object relationship"
  author: user!
  authorId: String!
  "An object relationship"
  color: color!
  colorName: String!
  "An array relationship"
  document_labels(
    "distinct select on columns"
    distinct_on: [document_label_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [document_label_order_by!],
    "filter the rows returned"
    where: document_label_bool_exp
  ): [document_label!]!
  id: uuid!
  label: String!
}

"response of any mutation on the table \"label\""
type label_mutation_response {
  "number of affected rows by the mutation"
  affected_rows: Int!
  "data of the affected rows by the mutation"
  returning: [label!]!
}

"mutation root"
type mutation_root {
  "insert data into the table: \"comment\""
  addComment(
    "the rows to be inserted"
    objects: [comment_insert_input!]!,
    "on conflict condition"
    on_conflict: comment_on_conflict
  ): comment_mutation_response
  "insert data into the table: \"comment_reaction\""
  addCommentReaction(
    "the rows to be inserted"
    objects: [comment_reaction_insert_input!]!
  ): comment_reaction_mutation_response
  "insert data into the table: \"document\""
  addDocument(
    "the rows to be inserted"
    objects: [document_insert_input!]!,
    "on conflict condition"
    on_conflict: document_on_conflict
  ): document_mutation_response
  "insert data into the table: \"document_label\""
  addDocumentLabel(
    "the rows to be inserted"
    objects: [document_label_insert_input!]!
  ): document_label_mutation_response
  "insert data into the table: \"document_reaction\""
  addDocumentReaction(
    "the rows to be inserted"
    objects: [document_reaction_insert_input!]!
  ): document_reaction_mutation_response
  "insert data into the table: \"follow\""
  addFollow(
    "the rows to be inserted"
    objects: [follow_insert_input!]!
  ): follow_mutation_response
  "insert data into the table: \"label\""
  addLabel(
    "the rows to be inserted"
    objects: [label_insert_input!]!,
    "on conflict condition"
    on_conflict: label_on_conflict
  ): label_mutation_response
  "delete single row from the table: \"comment\""
  delete_comment_by_pk(id: uuid!): comment
  "delete single row from the table: \"comment_reaction\""
  delete_comment_reaction_by_pk(id: uuid!): comment_reaction
  "delete single row from the table: \"document\""
  delete_document_by_pk(id: uuid!): document
  "delete single row from the table: \"document_label\""
  delete_document_label_by_pk(id: uuid!): document_label
  "delete single row from the table: \"document_reaction\""
  delete_document_reaction_by_pk(id: uuid!): document_reaction
  "delete single row from the table: \"follow\""
  delete_follow_by_pk(id: uuid!): follow
  "delete single row from the table: \"label\""
  delete_label_by_pk(id: uuid!): label
  "insert a single row into the table: \"comment\""
  insert_comment_one(
    "the row to be inserted"
    object: comment_insert_input!,
    "on conflict condition"
    on_conflict: comment_on_conflict
  ): comment
  "insert a single row into the table: \"comment_reaction\""
  insert_comment_reaction_one(
    "the row to be inserted"
    object: comment_reaction_insert_input!
  ): comment_reaction
  "insert a single row into the table: \"document_label\""
  insert_document_label_one(
    "the row to be inserted"
    object: document_label_insert_input!
  ): document_label
  "insert a single row into the table: \"document\""
  insert_document_one(
    "the row to be inserted"
    object: document_insert_input!,
    "on conflict condition"
    on_conflict: document_on_conflict
  ): document
  "insert a single row into the table: \"document_reaction\""
  insert_document_reaction_one(
    "the row to be inserted"
    object: document_reaction_insert_input!
  ): document_reaction
  "insert a single row into the table: \"follow\""
  insert_follow_one(
    "the row to be inserted"
    object: follow_insert_input!
  ): follow
  "insert a single row into the table: \"label\""
  insert_label_one(
    "the row to be inserted"
    object: label_insert_input!,
    "on conflict condition"
    on_conflict: label_on_conflict
  ): label
  "delete data from the table: \"comment\""
  removeComment(
    "filter the rows which have to be deleted"
    where: comment_bool_exp!
  ): comment_mutation_response
  "delete data from the table: \"comment_reaction\""
  removeCommentReaction(
    "filter the rows which have to be deleted"
    where: comment_reaction_bool_exp!
  ): comment_reaction_mutation_response
  "delete data from the table: \"document\""
  removeDocument(
    "filter the rows which have to be deleted"
    where: document_bool_exp!
  ): document_mutation_response
  "delete data from the table: \"document_label\""
  removeDocumentLabel(
    "filter the rows which have to be deleted"
    where: document_label_bool_exp!
  ): document_label_mutation_response
  "delete data from the table: \"document_reaction\""
  removeDocumentReaction(
    "filter the rows which have to be deleted"
    where: document_reaction_bool_exp!
  ): document_reaction_mutation_response
  "delete data from the table: \"follow\""
  removeFollow(
    "filter the rows which have to be deleted"
    where: follow_bool_exp!
  ): follow_mutation_response
  "delete data from the table: \"label\""
  removeLabel(
    "filter the rows which have to be deleted"
    where: label_bool_exp!
  ): label_mutation_response
  "update data of the table: \"comment\""
  updateComment(
    "sets the columns of the filtered rows to the given values"
    _set: comment_set_input,
    "filter the rows which have to be updated"
    where: comment_bool_exp!
  ): comment_mutation_response
  "update data of the table: \"document\""
  updateDocument(
    "sets the columns of the filtered rows to the given values"
    _set: document_set_input,
    "filter the rows which have to be updated"
    where: document_bool_exp!
  ): document_mutation_response
  "update data of the table: \"label\""
  updateLabel(
    "sets the columns of the filtered rows to the given values"
    _set: label_set_input,
    "filter the rows which have to be updated"
    where: label_bool_exp!
  ): label_mutation_response
  "update single row of the table: \"comment\""
  update_comment_by_pk(
    "sets the columns of the filtered rows to the given values"
    _set: comment_set_input,
    pk_columns: comment_pk_columns_input!
  ): comment
  "update single row of the table: \"document\""
  update_document_by_pk(
    "sets the columns of the filtered rows to the given values"
    _set: document_set_input,
    pk_columns: document_pk_columns_input!
  ): document
  "update single row of the table: \"label\""
  update_label_by_pk(
    "sets the columns of the filtered rows to the given values"
    _set: label_set_input,
    pk_columns: label_pk_columns_input!
  ): label
}

"query root"
type query_root {
  "fetch data from the table: \"color\""
  allColors(
    "distinct select on columns"
    distinct_on: [color_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [color_order_by!],
    "filter the rows returned"
    where: color_bool_exp
  ): [color!]!
  "fetch data from the table: \"comment_reaction\""
  allCommentReactions(
    "distinct select on columns"
    distinct_on: [comment_reaction_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [comment_reaction_order_by!],
    "filter the rows returned"
    where: comment_reaction_bool_exp
  ): [comment_reaction!]!
  "fetch data from the table: \"comment\""
  allComments(
    "distinct select on columns"
    distinct_on: [comment_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [comment_order_by!],
    "filter the rows returned"
    where: comment_bool_exp
  ): [comment!]!
  "fetch data from the table: \"document_label\""
  allDocumentLabels(
    "distinct select on columns"
    distinct_on: [document_label_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [document_label_order_by!],
    "filter the rows returned"
    where: document_label_bool_exp
  ): [document_label!]!
  "fetch data from the table: \"document_reaction\""
  allDocumentReactions(
    "distinct select on columns"
    distinct_on: [document_reaction_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [document_reaction_order_by!],
    "filter the rows returned"
    where: document_reaction_bool_exp
  ): [document_reaction!]!
  "fetch data from the table: \"document\""
  allDocuments(
    "distinct select on columns"
    distinct_on: [document_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [document_order_by!],
    "filter the rows returned"
    where: document_bool_exp
  ): [document!]!
  "fetch data from the table: \"follow\""
  allFollows(
    "distinct select on columns"
    distinct_on: [follow_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [follow_order_by!],
    "filter the rows returned"
    where: follow_bool_exp
  ): [follow!]!
  "fetch data from the table: \"label\""
  allLabels(
    "distinct select on columns"
    distinct_on: [label_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [label_order_by!],
    "filter the rows returned"
    where: label_bool_exp
  ): [label!]!
  "fetch data from the table: \"reaction\""
  allReactions(
    "distinct select on columns"
    distinct_on: [reaction_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [reaction_order_by!],
    "filter the rows returned"
    where: reaction_bool_exp
  ): [reaction!]!
  "fetch data from the table: \"user\""
  allUsers(
    "distinct select on columns"
    distinct_on: [user_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [user_order_by!],
    "filter the rows returned"
    where: user_bool_exp
  ): [user!]!
  "fetch data from the table: \"color\" using primary key columns"
  color(name: String!): color
  "fetch data from the table: \"comment\" using primary key columns"
  comment(id: uuid!): comment
  "fetch data from the table: \"comment_reaction\" using primary key columns"
  commentReaction(id: uuid!): comment_reaction
  "fetch data from the table: \"comment_reactions_group\""
  comment_reactions_group(
    "distinct select on columns"
    distinct_on: [comment_reactions_group_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [comment_reactions_group_order_by!],
    "filter the rows returned"
    where: comment_reactions_group_bool_exp
  ): [comment_reactions_group!]!
  "fetch data from the table: \"document\" using primary key columns"
  document(id: uuid!): document
  "fetch data from the table: \"document_label\" using primary key columns"
  documentLabel(id: uuid!): document_label
  "fetch data from the table: \"document_reaction\" using primary key columns"
  documentReactino(id: uuid!): document_reaction
  "fetch data from the table: \"document_reaction_group\""
  document_reaction_group(
    "distinct select on columns"
    distinct_on: [document_reaction_group_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [document_reaction_group_order_by!],
    "filter the rows returned"
    where: document_reaction_group_bool_exp
  ): [document_reaction_group!]!
  "fetch data from the table: \"document_reaction_group_persisted\""
  document_reaction_group_persisted(
    "distinct select on columns"
    distinct_on: [document_reaction_group_persisted_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [document_reaction_group_persisted_order_by!],
    "filter the rows returned"
    where: document_reaction_group_persisted_bool_exp
  ): [document_reaction_group_persisted!]!
  "fetch data from the table: \"document_reaction_group_persisted\" using primary key columns"
  document_reaction_group_persisted_by_pk(id: bigint!): document_reaction_group_persisted
  "fetch data from the table: \"follow\" using primary key columns"
  follow(id: uuid!): follow
  "fetch data from the table: \"label\" using primary key columns"
  label(id: uuid!): label
  "fetch data from the table: \"reaction\" using primary key columns"
  reaction(htmlCode: String!): reaction
  "execute function \"search_documents\" which returns \"document\""
  search_documents(
    "input parameters for function \"search_documents\""
    args: search_documents_args!,
    "distinct select on columns"
    distinct_on: [document_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [document_order_by!],
    "filter the rows returned"
    where: document_bool_exp
  ): [document!]!
  "fetch data from the table: \"user\" using primary key columns"
  user(id: uuid!): user
}

"columns and relationships of \"reaction\""
type reaction {
  htmlCode: String!
  title: String!
}

"subscription root"
type subscription_root {
  "fetch data from the table: \"color\""
  allColors(
    "distinct select on columns"
    distinct_on: [color_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [color_order_by!],
    "filter the rows returned"
    where: color_bool_exp
  ): [color!]!
  "fetch data from the table: \"comment_reaction\""
  allCommentReactions(
    "distinct select on columns"
    distinct_on: [comment_reaction_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [comment_reaction_order_by!],
    "filter the rows returned"
    where: comment_reaction_bool_exp
  ): [comment_reaction!]!
  "fetch data from the table: \"comment\""
  allComments(
    "distinct select on columns"
    distinct_on: [comment_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [comment_order_by!],
    "filter the rows returned"
    where: comment_bool_exp
  ): [comment!]!
  "fetch data from the table: \"document_label\""
  allDocumentLabels(
    "distinct select on columns"
    distinct_on: [document_label_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [document_label_order_by!],
    "filter the rows returned"
    where: document_label_bool_exp
  ): [document_label!]!
  "fetch data from the table: \"document_reaction\""
  allDocumentReactions(
    "distinct select on columns"
    distinct_on: [document_reaction_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [document_reaction_order_by!],
    "filter the rows returned"
    where: document_reaction_bool_exp
  ): [document_reaction!]!
  "fetch data from the table: \"document\""
  allDocuments(
    "distinct select on columns"
    distinct_on: [document_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [document_order_by!],
    "filter the rows returned"
    where: document_bool_exp
  ): [document!]!
  "fetch data from the table: \"follow\""
  allFollows(
    "distinct select on columns"
    distinct_on: [follow_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [follow_order_by!],
    "filter the rows returned"
    where: follow_bool_exp
  ): [follow!]!
  "fetch data from the table: \"label\""
  allLabels(
    "distinct select on columns"
    distinct_on: [label_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [label_order_by!],
    "filter the rows returned"
    where: label_bool_exp
  ): [label!]!
  "fetch data from the table: \"reaction\""
  allReactions(
    "distinct select on columns"
    distinct_on: [reaction_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [reaction_order_by!],
    "filter the rows returned"
    where: reaction_bool_exp
  ): [reaction!]!
  "fetch data from the table: \"user\""
  allUsers(
    "distinct select on columns"
    distinct_on: [user_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [user_order_by!],
    "filter the rows returned"
    where: user_bool_exp
  ): [user!]!
  "fetch data from the table: \"color\" using primary key columns"
  color(name: String!): color
  "fetch data from the table: \"comment\" using primary key columns"
  comment(id: uuid!): comment
  "fetch data from the table: \"comment_reaction\" using primary key columns"
  commentReaction(id: uuid!): comment_reaction
  "fetch data from the table: \"comment_reactions_group\""
  comment_reactions_group(
    "distinct select on columns"
    distinct_on: [comment_reactions_group_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [comment_reactions_group_order_by!],
    "filter the rows returned"
    where: comment_reactions_group_bool_exp
  ): [comment_reactions_group!]!
  "fetch data from the table: \"document\" using primary key columns"
  document(id: uuid!): document
  "fetch data from the table: \"document_label\" using primary key columns"
  documentLabel(id: uuid!): document_label
  "fetch data from the table: \"document_reaction\" using primary key columns"
  documentReactino(id: uuid!): document_reaction
  "fetch data from the table: \"document_reaction_group\""
  document_reaction_group(
    "distinct select on columns"
    distinct_on: [document_reaction_group_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [document_reaction_group_order_by!],
    "filter the rows returned"
    where: document_reaction_group_bool_exp
  ): [document_reaction_group!]!
  "fetch data from the table: \"document_reaction_group_persisted\""
  document_reaction_group_persisted(
    "distinct select on columns"
    distinct_on: [document_reaction_group_persisted_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [document_reaction_group_persisted_order_by!],
    "filter the rows returned"
    where: document_reaction_group_persisted_bool_exp
  ): [document_reaction_group_persisted!]!
  "fetch data from the table: \"document_reaction_group_persisted\" using primary key columns"
  document_reaction_group_persisted_by_pk(id: bigint!): document_reaction_group_persisted
  "fetch data from the table: \"follow\" using primary key columns"
  follow(id: uuid!): follow
  "fetch data from the table: \"label\" using primary key columns"
  label(id: uuid!): label
  "fetch data from the table: \"reaction\" using primary key columns"
  reaction(htmlCode: String!): reaction
  "execute function \"search_documents\" which returns \"document\""
  search_documents(
    "input parameters for function \"search_documents\""
    args: search_documents_args!,
    "distinct select on columns"
    distinct_on: [document_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [document_order_by!],
    "filter the rows returned"
    where: document_bool_exp
  ): [document!]!
  "fetch data from the table: \"user\" using primary key columns"
  user(id: uuid!): user
}

"""

add author table


columns and relationships of "user"
"""
type user {
  authId: String!
  balanceCommentReaction: bigint!
  balanceDocumentReaction: bigint!
  countPrivateDocs: Int!
  countWrittenComments: Int!
  createdAt: timestamptz!
  "An array relationship"
  document_labels(
    "distinct select on columns"
    distinct_on: [document_label_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [document_label_order_by!],
    "filter the rows returned"
    where: document_label_bool_exp
  ): [document_label!]!
  "An array relationship"
  documents(
    "distinct select on columns"
    distinct_on: [document_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [document_order_by!],
    "filter the rows returned"
    where: document_bool_exp
  ): [document!]!
  "An array relationship"
  followers(
    "distinct select on columns"
    distinct_on: [follow_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [follow_order_by!],
    "filter the rows returned"
    where: follow_bool_exp
  ): [follow!]!
  "An array relationship"
  followings(
    "distinct select on columns"
    distinct_on: [follow_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [follow_order_by!],
    "filter the rows returned"
    where: follow_bool_exp
  ): [follow!]!
  id: uuid!
  imageUrl: String
  "An array relationship"
  labels(
    "distinct select on columns"
    distinct_on: [label_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [label_order_by!],
    "filter the rows returned"
    where: label_bool_exp
  ): [label!]!
  maxPrivateDocs: Int!
  name: String!
}

"select columns of table \"color\""
enum color_select_column {
  "column name"
  color
  "column name"
  name
}

"unique or primary key constraints on table \"comment\""
enum comment_constraint {
  "unique or primary key constraint"
  comment_pkey
}

"select columns of table \"comment_reaction\""
enum comment_reaction_select_column {
  "column name"
  authorId
  "column name"
  commentId
  "column name"
  createdAt
  "column name"
  id
  "column name"
  reactionId
}

"select columns of table \"comment_reactions_group\""
enum comment_reactions_group_select_column {
  "column name"
  count
  "column name"
  reactionid
}

"select columns of table \"comment\""
enum comment_select_column {
  "column name"
  authorId
  "column name"
  comment
  "column name"
  createdAt
  "column name"
  documentId
  "column name"
  id
  "column name"
  reactionBalance
  "column name"
  updatedAt
}

"update columns of table \"comment\""
enum comment_update_column {
  "column name"
  comment
}

"unique or primary key constraints on table \"document\""
enum document_constraint {
  "unique or primary key constraint"
  document_pkey
}

"select columns of table \"document_label\""
enum document_label_select_column {
  "column name"
  authorId
  "column name"
  id
  "column name"
  labelId
}

"select columns of table \"document_reaction_group_persisted\""
enum document_reaction_group_persisted_select_column {
  "column name"
  count
  "column name"
  reactionid
}

"select columns of table \"document_reaction_group\""
enum document_reaction_group_select_column {
  "column name"
  count
  "column name"
  reaction_id
}

"select columns of table \"document_reaction\""
enum document_reaction_select_column {
  "column name"
  authorId
  "column name"
  createdAt
  "column name"
  documentId
  "column name"
  id
  "column name"
  reactionId
}

"select columns of table \"document\""
enum document_select_column {
  "column name"
  allowComments
  "column name"
  authorId
  "column name"
  content
  "column name"
  countComments
  "column name"
  createdAt
  "column name"
  id
  "column name"
  isPublic
  "column name"
  reactionBalance
  "column name"
  title
  "column name"
  updatedAt
}

"update columns of table \"document\""
enum document_update_column {
  "column name"
  allowComments
  "column name"
  content
  "column name"
  isPublic
  "column name"
  title
}

"select columns of table \"follow\""
enum follow_select_column {
  "column name"
  authorId
  "column name"
  createdAt
  "column name"
  followingId
  "column name"
  id
}

"unique or primary key constraints on table \"label\""
enum label_constraint {
  "unique or primary key constraint"
  label_pkey
}

"select columns of table \"label\""
enum label_select_column {
  "column name"
  authorId
  "column name"
  colorName
  "column name"
  id
  "column name"
  label
}

"update columns of table \"label\""
enum label_update_column {
  "column name"
  colorName
  "column name"
  label
}

"column ordering options"
enum order_by {
  "in the ascending order, nulls last"
  asc
  "in the ascending order, nulls first"
  asc_nulls_first
  "in the ascending order, nulls last"
  asc_nulls_last
  "in the descending order, nulls first"
  desc
  "in the descending order, nulls first"
  desc_nulls_first
  "in the descending order, nulls last"
  desc_nulls_last
}

"select columns of table \"reaction\""
enum reaction_select_column {
  "column name"
  htmlCode
  "column name"
  title
}

"select columns of table \"user\""
enum user_select_column {
  "column name"
  authId
  "column name"
  balanceCommentReaction
  "column name"
  balanceDocumentReaction
  "column name"
  countPrivateDocs
  "column name"
  countWrittenComments
  "column name"
  createdAt
  "column name"
  id
  "column name"
  imageUrl
  "column name"
  maxPrivateDocs
  "column name"
  name
}

"expression to compare columns of type Boolean. All fields are combined with logical 'AND'."
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"expression to compare columns of type Int. All fields are combined with logical 'AND'."
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"expression to compare columns of type String. All fields are combined with logical 'AND'."
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"expression to compare columns of type bigint. All fields are combined with logical 'AND'."
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"Boolean expression to filter rows from the table \"color\". All fields are combined with a logical 'AND'."
input color_bool_exp {
  _and: [color_bool_exp]
  _not: color_bool_exp
  _or: [color_bool_exp]
  color: String_comparison_exp
  name: String_comparison_exp
}

"ordering options when selecting data from \"color\""
input color_order_by {
  color: order_by
  name: order_by
}

"primary key columns input for table: \"color\""
input color_pk_columns_input {
  name: String!
}

"input type for inserting array relation for remote table \"comment\""
input comment_arr_rel_insert_input {
  data: [comment_insert_input!]!
  on_conflict: comment_on_conflict
}

"Boolean expression to filter rows from the table \"comment\". All fields are combined with a logical 'AND'."
input comment_bool_exp {
  _and: [comment_bool_exp]
  _not: comment_bool_exp
  _or: [comment_bool_exp]
  author: user_bool_exp
  authorId: String_comparison_exp
  comment: String_comparison_exp
  createdAt: timestamptz_comparison_exp
  document: document_bool_exp
  documentId: uuid_comparison_exp
  id: uuid_comparison_exp
  reactionBalance: Int_comparison_exp
  reactions: comment_reaction_bool_exp
  reactionsGroup: comment_reactions_group_bool_exp
  updatedAt: timestamptz_comparison_exp
}

"input type for inserting data into table \"comment\""
input comment_insert_input {
  comment: String
  document: document_obj_rel_insert_input
  documentId: uuid
  reactions: comment_reaction_arr_rel_insert_input
}

"input type for inserting object relation for remote table \"comment\""
input comment_obj_rel_insert_input {
  data: comment_insert_input!
  on_conflict: comment_on_conflict
}

"on conflict condition type for table \"comment\""
input comment_on_conflict {
  constraint: comment_constraint!
  update_columns: [comment_update_column!]!
  where: comment_bool_exp
}

"ordering options when selecting data from \"comment\""
input comment_order_by {
  author: user_order_by
  authorId: order_by
  comment: order_by
  createdAt: order_by
  document: document_order_by
  documentId: order_by
  id: order_by
  reactionBalance: order_by
  updatedAt: order_by
}

"primary key columns input for table: \"comment\""
input comment_pk_columns_input {
  id: uuid!
}

"input type for inserting array relation for remote table \"comment_reaction\""
input comment_reaction_arr_rel_insert_input {
  data: [comment_reaction_insert_input!]!
}

"Boolean expression to filter rows from the table \"comment_reaction\". All fields are combined with a logical 'AND'."
input comment_reaction_bool_exp {
  _and: [comment_reaction_bool_exp]
  _not: comment_reaction_bool_exp
  _or: [comment_reaction_bool_exp]
  author: user_bool_exp
  authorId: String_comparison_exp
  comment: comment_bool_exp
  commentId: uuid_comparison_exp
  createdAt: timestamptz_comparison_exp
  id: uuid_comparison_exp
  reaction: reaction_bool_exp
  reactionId: String_comparison_exp
}

"input type for inserting data into table \"comment_reaction\""
input comment_reaction_insert_input {
  comment: comment_obj_rel_insert_input
  commentId: uuid
  reactionId: String
}

"input type for inserting object relation for remote table \"comment_reaction\""
input comment_reaction_obj_rel_insert_input {
  data: comment_reaction_insert_input!
}

"ordering options when selecting data from \"comment_reaction\""
input comment_reaction_order_by {
  author: user_order_by
  authorId: order_by
  comment: comment_order_by
  commentId: order_by
  createdAt: order_by
  id: order_by
  reaction: reaction_order_by
  reactionId: order_by
}

"primary key columns input for table: \"comment_reaction\""
input comment_reaction_pk_columns_input {
  id: uuid!
}

"Boolean expression to filter rows from the table \"comment_reactions_group\". All fields are combined with a logical 'AND'."
input comment_reactions_group_bool_exp {
  _and: [comment_reactions_group_bool_exp]
  _not: comment_reactions_group_bool_exp
  _or: [comment_reactions_group_bool_exp]
  count: bigint_comparison_exp
  reactionid: String_comparison_exp
}

"ordering options when selecting data from \"comment_reactions_group\""
input comment_reactions_group_order_by {
  count: order_by
  reactionid: order_by
}

"input type for updating data in table \"comment\""
input comment_set_input {
  comment: String
}

"input type for inserting array relation for remote table \"document\""
input document_arr_rel_insert_input {
  data: [document_insert_input!]!
  on_conflict: document_on_conflict
}

"Boolean expression to filter rows from the table \"document\". All fields are combined with a logical 'AND'."
input document_bool_exp {
  _and: [document_bool_exp]
  _not: document_bool_exp
  _or: [document_bool_exp]
  allowComments: Boolean_comparison_exp
  author: user_bool_exp
  authorId: String_comparison_exp
  comments: comment_bool_exp
  content: String_comparison_exp
  countComments: Int_comparison_exp
  createdAt: timestamptz_comparison_exp
  id: uuid_comparison_exp
  isPublic: Boolean_comparison_exp
  labels: document_label_bool_exp
  reactionBalance: Int_comparison_exp
  reactions: document_reaction_bool_exp
  reactionsGroup: document_reaction_group_persisted_bool_exp
  title: String_comparison_exp
  updatedAt: timestamptz_comparison_exp
}

"input type for inserting data into table \"document\""
input document_insert_input {
  allowComments: Boolean
  comments: comment_arr_rel_insert_input
  content: String
  isPublic: Boolean
  labels: document_label_arr_rel_insert_input
  reactions: document_reaction_arr_rel_insert_input
  title: String
}

"input type for inserting array relation for remote table \"document_label\""
input document_label_arr_rel_insert_input {
  data: [document_label_insert_input!]!
}

"Boolean expression to filter rows from the table \"document_label\". All fields are combined with a logical 'AND'."
input document_label_bool_exp {
  _and: [document_label_bool_exp]
  _not: document_label_bool_exp
  _or: [document_label_bool_exp]
  author: user_bool_exp
  authorId: String_comparison_exp
  document: document_bool_exp
  id: uuid_comparison_exp
  label: label_bool_exp
  labelId: uuid_comparison_exp
}

"input type for inserting data into table \"document_label\""
input document_label_insert_input {
  document: document_obj_rel_insert_input
  documentId: uuid
  label: label_obj_rel_insert_input
  labelId: uuid
}

"input type for inserting object relation for remote table \"document_label\""
input document_label_obj_rel_insert_input {
  data: document_label_insert_input!
}

"ordering options when selecting data from \"document_label\""
input document_label_order_by {
  author: user_order_by
  authorId: order_by
  document: document_order_by
  id: order_by
  label: label_order_by
  labelId: order_by
}

"primary key columns input for table: \"document_label\""
input document_label_pk_columns_input {
  id: uuid!
}

"input type for inserting object relation for remote table \"document\""
input document_obj_rel_insert_input {
  data: document_insert_input!
  on_conflict: document_on_conflict
}

"on conflict condition type for table \"document\""
input document_on_conflict {
  constraint: document_constraint!
  update_columns: [document_update_column!]!
  where: document_bool_exp
}

"ordering options when selecting data from \"document\""
input document_order_by {
  allowComments: order_by
  author: user_order_by
  authorId: order_by
  content: order_by
  countComments: order_by
  createdAt: order_by
  id: order_by
  isPublic: order_by
  reactionBalance: order_by
  title: order_by
  updatedAt: order_by
}

"primary key columns input for table: \"document\""
input document_pk_columns_input {
  id: uuid!
}

"input type for inserting array relation for remote table \"document_reaction\""
input document_reaction_arr_rel_insert_input {
  data: [document_reaction_insert_input!]!
}

"Boolean expression to filter rows from the table \"document_reaction\". All fields are combined with a logical 'AND'."
input document_reaction_bool_exp {
  _and: [document_reaction_bool_exp]
  _not: document_reaction_bool_exp
  _or: [document_reaction_bool_exp]
  authorId: String_comparison_exp
  createdAt: timestamptz_comparison_exp
  document: document_bool_exp
  documentId: uuid_comparison_exp
  id: uuid_comparison_exp
  reaction: reaction_bool_exp
  reactionId: String_comparison_exp
}

"Boolean expression to filter rows from the table \"document_reaction_group\". All fields are combined with a logical 'AND'."
input document_reaction_group_bool_exp {
  _and: [document_reaction_group_bool_exp]
  _not: document_reaction_group_bool_exp
  _or: [document_reaction_group_bool_exp]
  count: bigint_comparison_exp
  reaction_id: String_comparison_exp
}

"ordering options when selecting data from \"document_reaction_group\""
input document_reaction_group_order_by {
  count: order_by
  reaction_id: order_by
}

"Boolean expression to filter rows from the table \"document_reaction_group_persisted\". All fields are combined with a logical 'AND'."
input document_reaction_group_persisted_bool_exp {
  _and: [document_reaction_group_persisted_bool_exp]
  _not: document_reaction_group_persisted_bool_exp
  _or: [document_reaction_group_persisted_bool_exp]
  count: Int_comparison_exp
  reactionid: String_comparison_exp
}

"ordering options when selecting data from \"document_reaction_group_persisted\""
input document_reaction_group_persisted_order_by {
  count: order_by
  reactionid: order_by
}

"primary key columns input for table: \"document_reaction_group_persisted\""
input document_reaction_group_persisted_pk_columns_input {
  id: bigint!
}

"input type for inserting data into table \"document_reaction\""
input document_reaction_insert_input {
  document: document_obj_rel_insert_input
  documentId: uuid
  reactionId: String
}

"input type for inserting object relation for remote table \"document_reaction\""
input document_reaction_obj_rel_insert_input {
  data: document_reaction_insert_input!
}

"ordering options when selecting data from \"document_reaction\""
input document_reaction_order_by {
  authorId: order_by
  createdAt: order_by
  document: document_order_by
  documentId: order_by
  id: order_by
  reaction: reaction_order_by
  reactionId: order_by
}

"primary key columns input for table: \"document_reaction\""
input document_reaction_pk_columns_input {
  id: uuid!
}

"input type for updating data in table \"document\""
input document_set_input {
  allowComments: Boolean
  content: String
  isPublic: Boolean
  title: String
}

"input type for inserting array relation for remote table \"follow\""
input follow_arr_rel_insert_input {
  data: [follow_insert_input!]!
}

"Boolean expression to filter rows from the table \"follow\". All fields are combined with a logical 'AND'."
input follow_bool_exp {
  _and: [follow_bool_exp]
  _not: follow_bool_exp
  _or: [follow_bool_exp]
  author: user_bool_exp
  authorId: String_comparison_exp
  createdAt: timestamptz_comparison_exp
  following: user_bool_exp
  followingId: String_comparison_exp
  id: uuid_comparison_exp
}

"input type for inserting data into table \"follow\""
input follow_insert_input {
  followingId: String
}

"input type for inserting object relation for remote table \"follow\""
input follow_obj_rel_insert_input {
  data: follow_insert_input!
}

"ordering options when selecting data from \"follow\""
input follow_order_by {
  author: user_order_by
  authorId: order_by
  createdAt: order_by
  following: user_order_by
  followingId: order_by
  id: order_by
}

"primary key columns input for table: \"follow\""
input follow_pk_columns_input {
  id: uuid!
}

"input type for inserting array relation for remote table \"label\""
input label_arr_rel_insert_input {
  data: [label_insert_input!]!
  on_conflict: label_on_conflict
}

"Boolean expression to filter rows from the table \"label\". All fields are combined with a logical 'AND'."
input label_bool_exp {
  _and: [label_bool_exp]
  _not: label_bool_exp
  _or: [label_bool_exp]
  author: user_bool_exp
  authorId: String_comparison_exp
  color: color_bool_exp
  colorName: String_comparison_exp
  document_labels: document_label_bool_exp
  id: uuid_comparison_exp
  label: String_comparison_exp
}

"input type for inserting data into table \"label\""
input label_insert_input {
  colorName: String
  document_labels: document_label_arr_rel_insert_input
  label: String
}

"input type for inserting object relation for remote table \"label\""
input label_obj_rel_insert_input {
  data: label_insert_input!
  on_conflict: label_on_conflict
}

"on conflict condition type for table \"label\""
input label_on_conflict {
  constraint: label_constraint!
  update_columns: [label_update_column!]!
  where: label_bool_exp
}

"ordering options when selecting data from \"label\""
input label_order_by {
  author: user_order_by
  authorId: order_by
  color: color_order_by
  colorName: order_by
  id: order_by
  label: order_by
}

"primary key columns input for table: \"label\""
input label_pk_columns_input {
  id: uuid!
}

"input type for updating data in table \"label\""
input label_set_input {
  colorName: String
  label: String
}

"Boolean expression to filter rows from the table \"reaction\". All fields are combined with a logical 'AND'."
input reaction_bool_exp {
  _and: [reaction_bool_exp]
  _not: reaction_bool_exp
  _or: [reaction_bool_exp]
  htmlCode: String_comparison_exp
  title: String_comparison_exp
}

"ordering options when selecting data from \"reaction\""
input reaction_order_by {
  htmlCode: order_by
  title: order_by
}

"primary key columns input for table: \"reaction\""
input reaction_pk_columns_input {
  htmlCode: String!
}

input search_documents_args {
  search: String
}

"expression to compare columns of type timestamptz. All fields are combined with logical 'AND'."
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"Boolean expression to filter rows from the table \"user\". All fields are combined with a logical 'AND'."
input user_bool_exp {
  _and: [user_bool_exp]
  _not: user_bool_exp
  _or: [user_bool_exp]
  authId: String_comparison_exp
  balanceCommentReaction: bigint_comparison_exp
  balanceDocumentReaction: bigint_comparison_exp
  countPrivateDocs: Int_comparison_exp
  countWrittenComments: Int_comparison_exp
  createdAt: timestamptz_comparison_exp
  document_labels: document_label_bool_exp
  documents: document_bool_exp
  followers: follow_bool_exp
  followings: follow_bool_exp
  id: uuid_comparison_exp
  imageUrl: String_comparison_exp
  labels: label_bool_exp
  maxPrivateDocs: Int_comparison_exp
  name: String_comparison_exp
}

"ordering options when selecting data from \"user\""
input user_order_by {
  authId: order_by
  balanceCommentReaction: order_by
  balanceDocumentReaction: order_by
  countPrivateDocs: order_by
  countWrittenComments: order_by
  createdAt: order_by
  id: order_by
  imageUrl: order_by
  maxPrivateDocs: order_by
  name: order_by
}

"primary key columns input for table: \"user\""
input user_pk_columns_input {
  id: uuid!
}

"expression to compare columns of type uuid. All fields are combined with logical 'AND'."
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}


scalar bigint

scalar timestamptz

scalar uuid
